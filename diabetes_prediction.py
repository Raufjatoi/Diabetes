# -*- coding: utf-8 -*-
"""Diabetes Prediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/11pIkWA4LcORgaaa9CdDZ_VT2HWJSYZut

# EDA and Predictions on Diabeties data

## importing libs
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

"""## load data


"""

data = pd.read_csv('diabetes.csv')
data.head()

"""## checking for null values

"""

print(data.isnull().sum())

"""## summary of data"""

print(data.describe())

"""## Data Visualization"""

data.hist(bins=15, figsize=(15, 10), color='blue', edgecolor='black')
plt.show()

sns.pairplot(data, hue='Outcome', diag_kind='kde')
plt.show()

plt.figure(figsize=(15, 10))
sns.boxplot(data=data, orient='h')
plt.show()

plt.figure(figsize=(10, 8))
sns.heatmap(data.corr(), annot=True, cmap='coolwarm', fmt='.2f')
plt.show()

sns.countplot(x='Outcome', data=data)
plt.show()

"""## Creating some models with this data

### importing ml libs
"""

from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report, roc_auc_score, roc_curve
from sklearn.linear_model import LogisticRegression
from sklearn.tree import DecisionTreeClassifier
from sklearn.ensemble import RandomForestClassifier, GradientBoostingClassifier
from sklearn.svm import SVC

"""## spliting data into X ( features ) and y ( target )"""

X = data.drop('Outcome', axis=1)
y = data['Outcome']
X

"""## noe spliting the data into train and test sets

"""

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42, stratify=y)

"""## feature scalling"""

scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

"""## models"""

models = {
    'Logistic Regression': LogisticRegression(),
    'Decision Tree': DecisionTreeClassifier(),
    'Random Forest': RandomForestClassifier(),
    'Support Vector Machine': SVC(probability=True),
    'Gradient Boosting': GradientBoostingClassifier()
}

"""## using  all the models and see"""

results = {}
for model_name, model in models.items():
    model.fit(X_train, y_train)
    y_pred = model.predict(X_test)
    y_prob = model.predict_proba(X_test)[:, 1] if hasattr(model, 'predict_proba') else model.decision_function(X_test)
    results[model_name] = {
        'accuracy': accuracy_score(y_test, y_pred),
        'roc_auc': roc_auc_score(y_test, y_prob),
        'confusion_matrix': confusion_matrix(y_test, y_pred),
        'classification_report': classification_report(y_test, y_pred, output_dict=True)
    }

"""## vizulizing the accuracy"""

accuracies = [results[model]['accuracy'] for model in models]
roc_aucs = [results[model]['roc_auc'] for model in models]

plt.figure(figsize=(14, 7))
plt.subplot(1, 2, 1)
sns.barplot(x=list(models.keys()), y=accuracies)
plt.title('Model Accuracy')
plt.xticks(rotation=45)

plt.subplot(1, 2, 2)
sns.barplot(x=list(models.keys()), y=roc_aucs)
plt.title('Model ROC-AUC')
plt.xticks(rotation=45)

plt.tight_layout()
plt.show()

"""## finding the best model"""

best_model_name = max(results, key=lambda x: results[x]['roc_auc'])
best_model_conf_matrix = results[best_model_name]['confusion_matrix']

sns.heatmap(best_model_conf_matrix, annot=True, fmt='d', cmap='Blues')
plt.title(f'Confusion Matrix for {best_model_name}')
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.show()

# Print classification reports
for model_name in models:
    print(f"Classification Report for {model_name}:\n")
    print(pd.DataFrame(results[model_name]['classification_report']).transpose())
    print("\n")